import re
from utils.pathing import get_project_dir, get_project_agents_dir
from pathlib import Path

def handle_builder_agent(task):
    title = task.get("title") or task.get("description") or "[no title]"
    print(f"→ [builder_agent] Handling: {title}")

    # Example: derive project from task or hardcoded for now
    project_name = "career-agent"
    phase = task.get("title", "").lower()

    try:
        # Determine base output path
        output_dir = get_project_agents_dir(project_name)

        if not output_dir.exists():
            output_dir.mkdir(parents=True)
            print(f"📁 Created directory: {output_dir}")

        # Derive semantic module name from task title
        def slugify(text):
            text = text.lower()
            text = re.sub(r'[^a-z0-9]+', '_', text)
            text = re.sub(r'_+', '_', text)
            return text.strip('_')

        title_cleaned = re.sub(r'^implement phase[:\-]?\s*', '', title, flags=re.IGNORECASE)
        agent_slug = slugify(title_cleaned)
        agent_dir = output_dir / agent_slug
        agent_file = agent_dir / f"{agent_slug}.py"

        if not agent_dir.exists():
            agent_dir.mkdir()
            print(f"📁 Created agent subdirectory: {agent_dir}")

        if not agent_file.exists():
            with open(agent_file, 'w') as f:
                f.write(f"# Auto-generated by builder_agent for {title}\n\n")
                f.write("def handle():\n")
                f.write("    print('This is a placeholder for agent logic')\n")
            print(f"✅ Created agent file: {agent_file}")

    except Exception as e:
        print(f"❌ Error while scaffolding agent: {e}")